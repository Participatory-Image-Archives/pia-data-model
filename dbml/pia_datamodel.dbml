// dbml documentation: https://www.dbml.org/
// schema documentation https://dbdocs.io/thgie/pia_datamodel

// DROP SCHEMA public CASCADE;
// CREATE SCHEMA public;

// basic ontology entities
Table locations {
  id int [pk, increment]
  label varchar
  geonames_id int
  geonames_url varchar
  latitude float
  longitude float

  place_id int [ref: - places.id]

  created_at timestamp
  updated_at timestamp
}

Table places {
  id int [pk, increment]
  asv_id varchar
  label varchar

  collection_id int
  location_id int [ref: - locations.id]

  created_at timestamp
  updated_at timestamp

  Note: '''
    A Place is an unprecise concept related to geography.
  '''
}

Table dates {
  id int [pk, increment]
  date date
  date_string varchar
  type int

  created_at timestamp
  updated_at timestamp

  Note: '''
    Type can be either:
      1: date, a simple date with unclear definition (often it designates)
      2: start_date, in case of a daterange
      3: end_date, in case of a daterange
      4: birth_date, for a person
      5: death_date, for a person
  '''
}

Table keywords {
  id int [pk, increment]
  salsah_id int
  label varchar
  description varchar
  origin varchar
  aat_id int
  aat_url varchar

  created_at timestamp
  updated_at timestamp
}

Table alt_labels {
  id int [pk, increment]
  label varchar

  created_at timestamp
  updated_at timestamp
}

Table keyword_alt_label {
  keyword_id int
  alt_label_id int
}

Table comments {
  id int [pk, increment]
  comment varchar
  
  created_at timestamp
  updated_at timestamp
}

// sgv specific entities
Table images {
  id int [pk, increment]
  salsah_id int
  oldnr varchar
  signature varchar
  title varchar
  original_title varchar
  
  file_name varchar
  original_file_name varchar
  
  salsah_date varchar
  sequence_number varchar
  
  location int [ref: > locations.id]
  collection int [ref: - collections.id]
  verso int [ref: - images.id]

  objecttype int [ref: > object_types.id]
  model int [ref: > models.id]
  format int [ref: > formats.id]

  created_at timestamp
  updated_at timestamp

  Note: '''
    An image can have
    - dates
    - people, displayed or as copyright
    - references to other images
    - keywords
    - comments
  '''
}

Table image_date {
  image_id int
  date_id int
}

Table image_person {
  image_id int
  person_id int
}

Table image_copyright {
  image_id int
  person_id int
}

Table image_image {
  image_a int
  image_b int
}

Table image_keyword {
  image_id int [ref: > images.id]
  keyword_id int [ref: > keywords.id]
}

Table image_comment {
  image_id int
  comment_id int
}

Table object_types {
  id int [pk, increment]
  label varchar
  comment varchar
  aat_id int
  aat_url varchar
  
  created_at timestamp
  updated_at timestamp
}

Table models {
  id int [pk, increment]
  label varchar
  comment varchar
  aat_id int
  aat_url varchar
  
  created_at timestamp
  updated_at timestamp
}

Table formats {
  id int [pk, increment]
  label varchar
  comment varchar
  
  created_at timestamp
  updated_at timestamp
}

Table people {
  id int [pk, increment]
  salsah_id int
  name varchar

  title varchar
  family varchar
  gnd_id int
  gnd_url varchar
  birthplace int
  deathplace int

  description text
  
  created_at timestamp
  updated_at timestamp
}

Table person_date {
  person_id int
  date_id int
}

Table person_comment {
  person_id int
  comment_id int
}

Table jobs {
  id int [pk, increment]
  label varchar
  
  created_at timestamp
  updated_at timestamp
}

Table literatures {
  id int [pk, increment]
  label varchar
  
  created_at timestamp
  updated_at timestamp
}

Table person_job {
  person_id int
  job_id int
}

Table person_literature {
  person_id int
  literature_id int
}

Table person_alt_label {
  person_id int
  alt_label_id int
}

// Collections
Table collections {
  id int [pk, increment]
  salsah_id int

  label varchar
  signature varchar
  description text
  default_image varchar
  embedded_video varchar
  
  created_at timestamp
  updated_at timestamp
}

Table collection_comment {
  collection_id int
  comment_id int
}

Table collection_person {
  collection_id int
  person_id int
}

Table collection_literature {
  collection_id int
  literature_id int
}

Table collection_date {
  collection_id int
  date_id int
}

Table collection_alt_label {
  collection_id int
  alt_label_id int
}

Table albums {
  id int [pk, increment]
  salsah_id int

  title varchar
  label varchar
  signature varchar
  description text

  objecttype int [ref: > object_types.id]
  collection int [ref: - collections.id]
  
  created_at timestamp
  updated_at timestamp
}
Table album_date {
  album_id int
  date_id int
}
Table album_person {
  album_id int [ref: > albums.id]
  person_id int [ref: > people.id]
}
Table album_image {
  album_id int [ref: > albums.id]
  image_id int [ref: > images.id]
}

Table album_comment {
  album_id int
  comment_id int
}

// Document and Context Objects
// Notes, Protocols, etc
Table documents {
  id int [pk, increment]
  object_type int [ref: > object_types.id]
  model int [ref: > models.id]
  format int [ref: > formats.id]
  
  created_at timestamp
  updated_at timestamp
}

// Map based Model (comming from Atlas)
Table maps {
  id int [pk, increment]
  label varchar
  description varchar

  map_key_id int [ref: - map_keys.id]

  created_at timestamp
  updated_at timestamp
}

Table map_layers {
  id int [pk, increment]
  label varchar
  map int [ref: - maps.id]

  created_at timestamp
  updated_at timestamp
}

Table map_entries {
  id int [pk, increment]
  label varchar
  description varchar

  type int
  complex_data varchar
  image_id int [ref: - images.id]

  map_id int
  place_id int [ref: - places.id]
  location_id int

  created_at timestamp
  updated_at timestamp

  Note: '''
    Type can be either:
      0: place, refering to a place and getting coordinates from there
      1: precise, which is a marker placed on the map by hand; leading to the creation of a location
      2: complex, which is mutiple markers, a shape or line or an image; stores the information in complex_data
      3: image, image placed by hand; stores information in complex_data
  '''
}

Ref: maps.id < map_entries.map_id [delete: cascade]

// map keys aka legend
Table map_keys {
  id int [pk, increment]
  label varchar

  map_id int

  created_at timestamp
  updated_at timestamp
}

Ref: maps.id - map_keys.map_id [delete: cascade]

Table map_key_entries {
  id int [pk, increment]
  label varchar

  icon varchar
  icon_file_name varchar
  original_icon_file_name varchar
  map_key_id int
  
  created_at timestamp
  updated_at timestamp
}

Ref: map_keys.id < map_key_entries.map_key_id [delete: cascade]

Table map_entry_map_key_entry {
  map_entry_id int
  map_key_entry_id int
}